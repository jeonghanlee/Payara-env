#
.DEFAULT_GOAL := help

.PHONY: help default init distclean deinit

# # help is defined in 
# # https://gist.github.com/rcmachado/af3db315e31383502660
help:
	$(info --------------------------------------- )	
	$(info Make Targets)
	$(info --------------------------------------- )
	$(QUIET) awk '/^[a-zA-Z\-\_0-9]+:/ {            \
	  nb = sub( /^## /, "", helpMsg );              \
	  if(nb == 0) {                                 \
	    helpMsg = $$0;                              \
	    nb = sub( /^[^:]*:.* ## /, "", helpMsg );   \
	  }                                             \
	  if (nb)                                       \
	    print  $$1 "\t" helpMsg;                    \
	}                                               \
	{ helpMsg = $$0 }'                              \
	$(MAKEFILE_LIST) | column -ts:


default: help

## Clone Source
init:
ifeq "$(INIT_SRC)" "1"
	git clone $(SRC_GITURL) $(SRC_PATH)
	cd $(SRC_PATH) && git checkout $(SRC_TAG)
else
	$(QUIET)echo "$(SRC_PATH) exists. make distclean first, if one would like to restart it."
endif

deinit: distclean
## Clean Source
distclean:
ifneq ($(wildcard $(SRC_PATH)/.*),)
	$(QUIET)echo "We've found $(SRC_PATH)"
	$(QUIET)echo "Removing ....."
	$(QUIET)rm -rf $(SRC_PATH)
else
	$(QUIET)echo "There is no $(SRC_PATH)."
endif

.PHONY: build.pre build compile compile.post

build.pre:
	$(QUIET) rm -rf ~/.m2/repository/org/glassfish /tmp/{arquillian*,javaee*,fileinstall*,surefire*,payara*,cargo*}

## Build Source
build: compile compile.post

compile:
ifneq ($(wildcard $(SRC_PATH)/.*),)
	JAVA_HOME=$(BUILD_JAVA_HOME) $(MAVEN_PATH)/mvn -f $(SRC_PATH)/pom.xml -am \
	-B -V -ff  clean install -PQuickBuild \
	-Dmaven.test.skip=true \
	-Dmaven.javadoc.skip=true \
	-Dbuild.number=$(SRC_VERSION) 
else
	$(QUIET)echo "There is no $(SRC_PATH). Please make init first."
endif

.PHONEY: compile.post change.masterpassword change.adminpassword keystore.update certs.update certs.clean

## Update passwords keystore and cacerts
compile.post: change.masterpassword change.adminpassword keystore.update certs.update certs.clean get.jdbc install.jdbc update.domain domain.log.clean
#compile.post: change.masterpassword change.adminpassword get.jdbc install.jdbc update.domain domain.log.clean


change.masterpassword:
	@echo "AS_ADMIN_MASTERPASSWORD=$(OLD_MASTER_PASSWORD)" > $(SITE_TEMPLATE_PATH)/.password 
	@echo "AS_ADMIN_NEWMASTERPASSWORD=$(MASTER_PASSWORD)" >> $(SITE_TEMPLATE_PATH)/.password
	sh "$(SRC_TARGET)/bin/asadmin" change-master-password --passwordfile=$(SITE_TEMPLATE_PATH)/.password --savemasterpassword=true --domaindir $(SRC_TARGET)/glassfish/domains/ production
	rm -f $(SITE_TEMPLATE_PATH)/.password

change.adminpassword:
	@echo "AS_ADMIN_PASSWORD=$(OLD_ADMIN_PASSWORD)"  > $(SITE_TEMPLATE_PATH)/.adminpassword
	@echo "AS_ADMIN_NEWPASSWORD=$(ADMIN_PASSWORD)"  >> $(SITE_TEMPLATE_PATH)/.adminpassword
	sh "$(SRC_TARGET)/bin/asadmin" --user $(ADMIN_USER) --passwordfile=$(SITE_TEMPLATE_PATH)/.adminpassword change-admin-password --domaindir $(SRC_TARGET)/glassfish/domains/ --domain_name production
	rm -f $(SITE_TEMPLATE_PATH)/.adminpassword

.PHONEY: keystore.update keystore.convert keystore.delete keystore.genkeypair

keystore.update: keystore.convert keystore.delete keystore.genkeypair 
#keystore.update: keystore.delete keystore.genkeypair 

keystore.convert:
	echo "$(MASTER_PASSWORD)" | $(JAVA_PATH)/keytool -importkeystore -srckeystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks  -destkeystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -deststoretype pkcs12 

keystore.inspect:
	$(JAVA_PATH)/keytool -list -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD)

# s1as               : http-listener-2 (default 8181) 
# glassfish-instance : admin-listener  (default 4848)
keystore.delete:
	$(JAVA_PATH)/keytool -delete -alias s1as -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD)
	$(JAVA_PATH)/keytool -delete -alias glassfish-instance -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD)

keystore.genkeypair:
	$(JAVA_PATH)/keytool -genkeypair -alias s1as -dname "$(PAYARA_DN_NAME)" -keyalg RSA -keysize 2048 -validity 3650 -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD) -keypass $(MASTER_PASSWORD)
	$(JAVA_PATH)/keytool -genkeypair -alias glassfish-instance -dname "$(PAYARA_DN_NAME)" -keyalg RSA -keysize 2048 -validity 3650 -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD) -keypass $(MASTER_PASSWORD)

.PHONEY: certs.update certs.export certs.delete certs.import certs.clean update.domain

certs.update: certs.export certs.delete certs.import

certs.inspect:
	$(JAVA_PATH)/keytool -list -keystore $(SRC_TARGET)/glassfish/domains/production/config/cacerts.jks -storepass $(MASTER_PASSWORD)

certs.export:
	$(JAVA_PATH)/keytool -exportcert -alias s1as -file $(SITE_TEMPLATE_PATH)/s1as.cert -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD)
	$(JAVA_PATH)/keytool -exportcert -alias glassfish-instance -file $(SITE_TEMPLATE_PATH)/glassfish-instance.cert -keystore $(SRC_TARGET)/glassfish/domains/production/config/keystore.jks -storepass $(MASTER_PASSWORD)

certs.delete:
	$(JAVA_PATH)/keytool -delete -alias s1as -keystore $(SRC_TARGET)/glassfish/domains/production/config/cacerts.jks -storepass $(MASTER_PASSWORD)
	$(JAVA_PATH)/keytool -delete -alias glassfish-instance -keystore $(SRC_TARGET)/glassfish/domains/production/config/cacerts.jks -storepass $(MASTER_PASSWORD)

certs.import:
	$(JAVA_PATH)/keytool -importcert -noprompt -alias s1as -file $(SITE_TEMPLATE_PATH)/s1as.cert -keystore $(SRC_TARGET)/glassfish/domains/production/config/cacerts.jks -storepass $(MASTER_PASSWORD) -keypass $(MASTER_PASSWORD)
	$(JAVA_PATH)/keytool -importcert -noprompt -alias glassfish-instance -file $(SITE_TEMPLATE_PATH)/glassfish-instance.cert -keystore $(SRC_TARGET)/glassfish/domains/production/config/cacerts.jks -storepass $(MASTER_PASSWORD) -keypass $(MASTER_PASSWORD)

certs.clean:
	rm -f $(SITE_TEMPLATE_PATH)/*.cert

.PHONY: update.domain domain.log.clean

update.domain:
	$(QUIET)echo ">>> Update $(DOMAIN_XML)"
	$(QUIET)sed -i~ \
			-e "s:Xms$(JAVA_HEAPSIZE):Xms$(NEW_JAVA_HEAPSIZE):g" \
			-e "s:Xmx$(JAVA_HEAPSIZE):Xmx$(NEW_JAVA_HEAPSIZE):g" \
			-e "s:MaxMetaspaceSize=2g:MaxMetaspaceSize=$(MAX_METASPACE_SIZE):g" $(DOMAIN_XML)

domain.log.clean:
	-rm -f $(SRC_TARGET)/glassfish/domains/production/logs/server.log

clean.local:
	@-rm -f $(TOP)/*.local
	@-rm -f $(TOP)/configure/*.local
